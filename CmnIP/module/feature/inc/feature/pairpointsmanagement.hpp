/**
* @file pairpoints_management.hpp
* @brief Header of the classes and functions to manage the pair points.
*
* @section LICENSE
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR/AUTHORS BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* @author  Alessandro Moro <alessandromoro.italy@gmail.com>
* @bug No known bugs.
* @version 1.0.0.0
*
*/


#ifndef CMNIP_FEATURE_PAIRPOINTSMANAGEMENT_HPP__
#define CMNIP_FEATURE_PAIRPOINTSMANAGEMENT_HPP__

#include <iostream>
#include <vector>

#include <opencv2/core/core.hpp>
#include "cmnmathworld/inc/cmnmathworld/cmnmathworld_headers.hpp"

namespace CmnIP
{
namespace feature
{

/** @brief Class to manage pair of points in simple geometric information. 

	@note _Ty is usually cv::Point2f _Ty2 double
*/
template <typename _Ty = cv::Point2f, typename _Ty2 = double>
class PairPointManagement
{
public:

	/** @brief Calculate the relation between pairs of points in a set of data.

		@param[in] points Set of pair of points source and destination.
		@param[out] v_angle Container with the angle in radiant [-PI,PI] which
		            measure the angle between the source point and destination.
		@param[out] v_magnitude Container with the magnitude between the two
		            points.
	*/
	static void points_relation(const std::vector< std::pair<_Ty, _Ty> > &points,
		std::vector< _Ty2 > &v_angle, std::vector< _Ty2 > &v_magnitude) {

		//for (std::vector< std::pair<_Ty, _Ty> >::const_iterator it = points.begin();
		//	it != points.end(); it++)
		for (auto &it : points)
		{
			v_angle.push_back(std::atan2((_Ty2)(it->second.y - it->first.y),
				(_Ty2)(it->second.x - it->first.x)));
			v_magnitude.push_back(std::sqrt(
				std::pow((_Ty2)it->second.y - (_Ty2)it->first.y, 2) +
				std::pow((_Ty2)it->second.x - (_Ty2)it->first.x, 2)));
		}
	}

	/** @brief Calculate the relation between pairs of points in a set of data.

	@param[in] points Set of pair of points source and destination.
	@param[out] features Container with the features generated by the set of 
	            points. The features are calculated as:
				[0] standard deviation of the angles between points calculated
				    with directional statistics.
				[1] standard deviation of the magnitude between the points.
	*/
	static void points2features(const std::vector< std::pair<_Ty, _Ty> > &points,
		std::vector<_Ty2> &features) {

		std::vector< _Ty2 > v_angle, v_magnitude;
		points_relation(points, v_angle, v_magnitude);
		int s = v_angle.size();
		for (int i = 0; i < s; i++)
		{
			v_angle[i] = (v_angle[i] > 0 ? v_angle[i] : (2 * CV_PI + v_angle[i]));
		}
		_Ty2 angle_mean = 0, R = 0, var = 0, sd = 0;
		CmnMath::statistics::directional::SeriesAnalysis<_Ty2>::mean(
			v_angle, angle_mean, R);
		var = CmnMath::statistics::directional::SeriesAnalysis<_Ty2>::variance(R);
		sd = CmnMath::statistics::directional::SeriesAnalysis<_Ty2>::standard_deviation(R);
		_Ty2 variance_magnitude = 0;
		CmnMath::statistics::classic::SeriesAnalysis<_Ty2>::naive_variance(
			v_magnitude, variance_magnitude);
		features.clear();
		features.push_back(sd);
		features.push_back(std::sqrt(variance_magnitude));
	}
};


} // namespace feature
} // namespace CmnIP


#endif /* CMNIP_FEATURE_PAIRPOINTSMANAGEMENT_HPP__ */
